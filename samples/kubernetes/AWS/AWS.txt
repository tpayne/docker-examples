# To configure an ECR...
# Create a programmatic user in IAM (or console)
aws iam create-user --user-name <userName>
aws iam create-access-key --user-name <userName> (keep a copy of the output)

# Attach policy AmazonEC2ContainerRegistryFullAccess to user
aws iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess --user-name <userName> 

# Configure the user - use details from above - for region use ECR region, for output use json
aws configure --profile <userName>

# Create an ECR... (you may need to configure a region for your logged in user via aws configure)
aws ecr create-repository \
    --repository-name <repoName> \
    --image-scanning-configuration scanOnPush=true

# Save the repo URL and then do...
aws ecr get-login-password --profile <userName> --region <regionId> | \
	docker login --username AWS --password-stdin <repoURL>

# The login test should work (hopefully!)

# In Jenkins, create a user/pwd credential... 
# - username AWS
# - password = aws ecr get-login-password --profile <userName> --region <regionId>
# - ID = userName
# 
# Then define your build job using...
# 
#                 // Use this for username/passwork cred generated by
#                 // aws ecr get-login-password --profile <profile> --region <region> 
#                 script {
#                     docker.withRegistry('https://<repoURI>','<userName>') {
#                         sh "docker push <repoURI>:latest"
#                     }
#                 }

